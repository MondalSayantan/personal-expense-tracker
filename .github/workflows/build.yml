name: Debug Android Gradle Build

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  debug-gradle:
    runs-on: ubuntu-latest
    steps:
      # ───────────────────────────── checkout ─────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ───────────────────────────── toolchains ───────────────────────────
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.3"
          channel: stable

      # ─── CI-only: generate local.properties so settings.gradle finds Flutter SDK ───
      - name: Create local.properties for Gradle
        working-directory: android
        run: |
          echo "flutter.sdk=$FLUTTER_HOME" > local.properties

      # ─── CI-only: generate .env so Flutter asset bundling won’t break ───
      - name: Create .env file for Flutter assets
        run: |
          mkdir -p assets
          cat <<EOF > assets/.env
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          EOF

      # ───────────────────────────── cache & install ────────────────────────
      - name: Cache Pub cache
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install dependencies
        run: flutter pub get

      # ───────────────────────────── accept Android licences ──────────────
      - name: Accept Android SDK licenses
        run: yes | flutter doctor --android-licenses

      # ───────────────────────────── verify secrets early ──────────────────
      - name: Verify necessary secrets
        run: |
          if [ -z "${{ secrets.MONGODB_URI }}" ]; then
            echo "::error::❌  MONGODB_URI is not configured."
            exit 1
          fi
          echo "✅ MONGODB_URI detected"

          if [ -z "${{ secrets.UPLOAD_KEYSTORE }}" ]; then
            echo "::warning::⚠️  UPLOAD_KEYSTORE not configured; using debug key."
          else
            echo "✅ Keystore secret detected"
            [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ] && echo "::warning::⚠️ KEYSTORE_PASSWORD not set"
            [ -z "${{ secrets.KEY_ALIAS }}" ] && echo "::warning::⚠️ KEY_ALIAS not set; defaulting to 'upload'"
          fi

      # ───────────────────────────── version/tag logic ────────────────────
      - name: Extract version from pubspec.yaml
        id: version
        run: |
          set -e
          VERSION=$(grep -m1 '^version:' pubspec.yaml | cut -d' ' -f2 | sed 's/+.*$//')
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Check if tag exists
        id: tag_exists
        run: |
          if git rev-parse "v${{ steps.version.outputs.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> "$GITHUB_OUTPUT"
          else
            echo "TAG_EXISTS=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Exit if already released
        if: steps.tag_exists.outputs.TAG_EXISTS == 'true'
        run: exit 0

      # ───────────────────────────── environment info ─────────────────────
      - name: Print Flutter environment
        run: |
          flutter --version
          flutter doctor -v

      # ───────────────────────────── setup signing keys ──────────────────
      - name: Setup Keystore for signing
        run: |
          if [ -n "${{ secrets.UPLOAD_KEYSTORE }}" ]; then
            mkdir -p android/app/keystore
            echo "${{ secrets.UPLOAD_KEYSTORE }}" | base64 --decode > android/app/keystore/keystore.jks
            KEY_ALIAS="${{ secrets.KEY_ALIAS }}"
            {
              echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}"
              echo "keyPassword=${{ secrets.KEYSTORE_PASSWORD }}"
              echo "keyAlias=$KEY_ALIAS"
              echo "storeFile=../app/keystore/keystore.jks"
            } > android/key.properties
          fi

      # ───────────────────── Debug Android build with full logs ──────────
      - name: Debug Android build with Gradle
        working-directory: android
        run: |
          set -e
          echo "1) Cleaning previous outputs"
          ./gradlew clean

          echo "2) Running assembleRelease with debug flags"
          ./gradlew assembleRelease \
            --debug \
            --info \
            --stacktrace \
            > ../gradle-release.log 2>&1 || true

          echo "=== BEGIN GRADLE LOG ==="
          sed -n '1,200p' ../gradle-release.log
          echo "... (snipped) ..."
          sed -n '200,400p' ../gradle-release.log
          echo "=== END GRADLE LOG ==="

      # ──────────────────── Fail if APK not produced ─────────────────────
      - name: Fail if assembleRelease didn’t produce an APK
        if: always()
        working-directory: android
        run: |
          if [ ! -f "build/outputs/apk/release/app-release.apk" ]; then
            echo "::error::APK not found—check gradle-release.log for errors."
            exit 1
          fi
