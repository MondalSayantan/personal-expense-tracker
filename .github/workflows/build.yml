name: Build and Release

on:
  push:
    branches: [main]

# ───────────────────────────── repository‑level permissions ─────────────────────────────
permissions:
  contents: write # needed for creating tags & releases

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write # same permission inside the job

    steps:
      # ───────────────────────────── checkout ─────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # we need full history & tags for version check

      # ───────────────────────────── toolchains ───────────────────────────
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.3"
          channel: stable

      # (optional) cache Pub dependencies
      - name: Cache Pub cache
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install dependencies
        run: flutter pub get

      # ───────────────────────────── accept Android licences ──────────────
      - name: Accept Android SDK licences
        run: yes | flutter doctor --android-licenses

      # ───────────────────────────── verify secret early ──────────────────
      - name: Verify MONGODB_URI secret
        env:
          MONGO_SECRET: ${{ secrets.MONGODB_URI }}
        run: |
          if [ -z "$MONGO_SECRET" ]; then
            echo "::error::❌  MONGODB_URI secret is not configured."
            echo "        👉  Settings ▸ Secrets ▸ Actions ▸ New repository secret."
            exit 1
          fi
          echo "✅ MONGODB_URI secret detected"

      # ───────────────────────────── version/tag logic ────────────────────
      - name: Extract version from pubspec.yaml
        id: version
        run: |
          set -e
          VERSION=$(grep -m1 '^version:' pubspec.yaml | cut -d' ' -f2 | sed 's/+.*$//')
          echo "📦 Detected version $VERSION"
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Check if tag already exists
        id: tag_exists
        run: |
          if git rev-parse "v${{ steps.version.outputs.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> "$GITHUB_OUTPUT"
            echo "🔖 Tag v${{ steps.version.outputs.VERSION }} already exists."
          else
            echo "TAG_EXISTS=false" >> "$GITHUB_OUTPUT"
            echo "🔖 Tag v${{ steps.version.outputs.VERSION }} does not exist."
          fi

      - name: Exit early if release already published
        if: steps.tag_exists.outputs.TAG_EXISTS == 'true'
        run: |
          echo "🚫 Release v${{ steps.version.outputs.VERSION }} already exists. Skipping."
          exit 0

      # ───────────────────────────── environment info ─────────────────────
      - name: Print Flutter environment
        run: |
          flutter --version
          flutter doctor -v

      # ───────────────────────────── build (verbose, log to file) ─────────
      - name: Build release APK (full log)
        id: flutter_build
        run: |
          set -eo pipefail
          echo "::group::flutter build apk"
          # Run the build, capture every byte, *and* stream to console
          flutter build apk -v --release \
            --dart-define=MONGODB_URI=${{ secrets.MONGODB_URI }} 2>&1 | tee flutter_build.log
          echo "::endgroup::"

      - name: Upload Flutter build log
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-log
          path: flutter_build.log

      # ───────────────────────────── locate APK by parsing the log ────────
      - name: Locate release APK
        id: locate_apk
        run: |
          set -e
          # First, try to parse the path Flutter prints: "Built <path‑to‑apk> (xx MB)."
          APK_PATH=$(grep -oE 'build/[^ ]+\.apk' flutter_build.log | head -n1 || true)

          # Fallback: brute‑force search if the above failed
          if [[ -z "$APK_PATH" ]]; then
            APK_PATH=$(find build -type f -name '*release*.apk' | head -n1 || true)
          fi

          if [[ -z "$APK_PATH" ]]; then
            echo "::error::No release APK produced by the build."
            exit 1
          fi

          echo "✅ Found APK at $APK_PATH"
          echo "APK_PATH=$APK_PATH" >> "$GITHUB_OUTPUT"
          cp "$APK_PATH" ./app-release.apk

      - name: Verify final artefact
        run: ls -lh ./app-release.apk

      # ───────────────────────────── make GitHub Release ──────────────────
      - name: Create GitHub release and upload APK
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.version.outputs.VERSION }}
          name: Release v${{ steps.version.outputs.VERSION }}
          bodyFile: CHANGELOG.md
          draft: false
          prerelease: false
          allowUpdates: true
          artifacts: ./app-release.apk
          artifactContentType: application/vnd.android.package-archive
          token: ${{ secrets.GITHUB_TOKEN }}
