name: Build and Release

on:
  push:
    branches: [ main ]
    
# Set permissions for GitHub token
permissions:
  contents: write # Needed for creating releases

jobs:
  build:
    runs-on: ubuntu-latest
    # Add permission to create tags and releases
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
      
      - name: Install dependencies
        run: flutter pub get

      # Extract version from pubspec.yaml
      - name: Extract Version
        id: version
        run: |
          VERSION=$(grep -m 1 '^version:' pubspec.yaml | awk '{ print $2 }' | sed 's/+.*$//')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
      # Check if tag already exists
      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git ls-remote --tags origin refs/tags/v${{ steps.version.outputs.VERSION }} | wc -l)
          echo "TAG_EXISTS=$TAG_EXISTS" >> $GITHUB_OUTPUT
          
      # Debug Flutter and verify it's working correctly
      - name: Debug Flutter
        run: |
          flutter --version
          flutter doctor -v
          
      # Build APK with simpler approach
      - name: Build APK
        run: flutter build apk --release --dart-define=MONGODB_URI=${{ secrets.MONGODB_URI }}
        
      # Verify the APK was created
      - name: Verify APK
        run: |
          mkdir -p build/outputs  # Create directory if it doesn't exist
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "✅ APK build successful"
            cp build/app/outputs/flutter-apk/app-release.apk ./app-release.apk
            ls -la .
          else
            echo "❌ APK build failed - file not found"
            find build -type f -name "*.apk" || echo "No APK files found in build directory"
            exit 1
          fi
      
      # Create release with the APK
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.version.outputs.VERSION }}
          name: Release v${{ steps.version.outputs.VERSION }}
          bodyFile: CHANGELOG.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: ./app-release.apk
          artifactContentType: application/vnd.android.package-archive
