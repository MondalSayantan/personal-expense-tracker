pluginManagement {
    // Define a simple function to look for Flutter SDK path
    def flutterSdkPath = {
        // First check environment variable (for CI)
        def envPath = System.getenv('FLUTTER_ROOT')
        if (envPath != null) {
            println "Using Flutter SDK from environment: $envPath"
            return envPath
        }
        
        // Then check local.properties (for local dev)
        def localProperties = new File(rootProject.projectDir.parentFile, "local.properties")
        if (localProperties.exists()) {
            def properties = new Properties()
            localProperties.withInputStream { stream -> properties.load(stream) }
            def sdkPath = properties.getProperty('flutter.sdk')
            if (sdkPath != null) {
                println "Using Flutter SDK from local.properties: $sdkPath"
                return sdkPath
            }
        }
        
        // Hardcoded fallback for CI (if all else fails)
        def fallbackPath = "/opt/hostedtoolcache/flutter/stable-3.29.3-x64"
        println "No Flutter SDK path found, using fallback: $fallbackPath"
        return fallbackPath
    }()

    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "dev.flutter.flutter-plugin-loader" version "1.0.0"
    id "com.android.application" version "8.2.1" apply false
    id "org.jetbrains.kotlin.android" version "1.8.22" apply false
}

include ":app"
